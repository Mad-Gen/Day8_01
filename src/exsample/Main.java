package exsample;

import animal.Cat;
import animal.Lion;
import animal.Tiger;

/**
 * Main.java
 */
public class Main {

  /**
   * エントリーポイント
   * @param args
   */
  public static void main(String[] args) {
    
    // お知らせ：
    // 昨日から新しいEX課題が出ているいます。
    // 本日の内容を十分知っている方は、解説の時間片耳だけ貸していただいてEXを作業していただいてもかまいません。
    // ご留意いただく点として、グループディスカッションの際は必ずご参加するようにしてください。こちらはチーム開発時の演習もかねています。
    //
    // Javaのご経験がある方にとって、今回の「クラスの継承」の演習では「継承を使わなくてもよい、あるいは別の方法がより適切」と感じる点
    // があるかもしれませんが「継承」を使った場合はどうなるかという観点で作業していただければ幸いです。
    
    
    // これまでに色々な動物のクラスを使ってきました。
    // 例えば...
    // Lion.java, Tiger.java,　etc...
    
    // このようなネコ科の動物のクラスをいくつも手軽に作りたい時に最初に思いつくのは「コピー&ペースト」してクラスを増やしちょこっと書き換えて使うことです。
    // ただしコピー & ペースト でコーディングすると問題があります。例えば...
    //
    //    1. コピー元にバグがあった時、コピーしたすべてのクラスの修正をしなければいけなくなる
    //    2. 何か機能を新しく追加したいとき、すべてのクラスにコードを追加しなければいけない。
    //
    // などです。
    
    
    
    // 「継承」の考え方を使えば、このような問題を解決できる場合があります。
    //   (前回は「抽象化」の考え方について、ディスカッションをしてみましたね)  
    // 
    // 抽象化して考えて出た答え          -> 「親クラス(基本クラス)」　↑の例ではとコピー元のファイル
    // 抽象化するために取り上げた具体的な例 -> 「子クラス(派生クラス)」　↑の例では、コピーしてちょっと書き換えたファイル
    // 
    // このように分けて、子クラスが親クラスを継承する（親クラスの機能を引き継ぐ）ようにすることができます。
    // 
    //    1. 親クラスに問題があっても親クラスだけを修正すればよい。
    //    2. 親クラスに新しい機能を追加すれば、すべての子クラスでその機能が使えるようになる。
    //    3. ポリモーフィズム(後で考えます)。
    //
    // などメリットが生まれます。ネコの例で考得た場合の図をご覧ください。
    
    
    
    // ではJavaにどのように落とし込めばよいでしょうか。
    //
    // ● 親クラス の書き方
    //     ▶ 「モノ・コト」を抽象化して、それらの「特性や本質(わかりにくい場合は共通している部分でもよいです)」を考えてコードにします。
    //     ▶ その中で、子クラスでカスタマイズする必要がありそうなものを、子クラスから"参照・オーバーライド"できる状態にしておきます。
    // ● 子クラス の書き方
    //     ▶ Javaの文法に従って、親クラスを継承します。
    //     ▶ 子クラスがカスタマイズしなければならないふるまいなどを子クラスで"オーバーライド"します。
    
    
    // ■ Javaで「継承」を行うための具体的な方法
    // まず最もシンプルなクラスで基本を確認しましょう。
    
    // 親クラス (基本クラス、スーパークラス)
    Cat cat = new Cat("スーパー☆猫ひろし"); // お名前お借りします。
    cat.setSex(Cat.SEX.MALE); // 性別はネコ科の動物（ネコを抽象化した概念）が持っているものなので、基本クラスに定義しました。
    
    // 子クラス (派生クラス、サブクラス)
    Lion lion = new Lion("サブ☆森本レオ"); // お名前お借りします。
    
    
    
    // ■■■■　とても重要 : 「継承すると子クラスに定義されていないメソッドが使える」 ■■■■
    // Lion クラスには setSex(), getSex()が定義されていませんが、親クラスである Cat クラスに定義されているので
    // そのデータ(変数)や機能(メソッド)を呼び出すことができます。
    lion.setSex(Cat.SEX.FEMALE);
    System.out.println("Lion クラスの " + cat.getName() + " は　" + (cat.getSex() == Cat.SEX.MALE ? "オス" : "メス") + " です");
    
    
    
    // ■■■■　とても重要 : 「親クラスのメソッドをオーバーライドして、動作をカスタマイズできます」 ■■■■
    // 親クラスである Cat はこのように表示されます。
    cat.speak();
    //
    // 子クラスである Lion で同じメソッドを呼び出すと...
    // オーバーライドによって、Cat.speak() の内容が書き換えられ、Lion クラス用に再定義(カスタマイズ)されています。
    lion.speak();  
    
    //
    System.out.println();
    
    
    
    // private protected public ... などのメソッドの動作を確認します。
    System.out.println("Lion クラスから super を使ってメソッドを呼び出します(super は親クラスの変数やメソッドを呼び出すのに使います。)。");
    lion.superCallingTest();
    System.out.println();
    //
    System.out.println("Lion クラスから this を使ってメソッドを呼び出します。");
    lion.thisCallingTest();
    System.out.println();
    
    
    
    // *****************************************
    // ★演習
    // Mini1 : Tiger.java が　Cat.java を継承するように変更してみましょう。テスト用のコードは取り除いてもかまいません。
    //       : 書き方がわからない場合は Lion.java を参考にしてみてください。
    // Full1 : 他にも Cat.java にメソッド定義があって、その継承クラスでそのメソッドをオーバーライドしてカスタマイズするとよさそうなふるまいがあるでしょうか。
    //       : 例えば、猫のタイプによって少しずつ異なる「ふるまいや情報」などを考えたり調査してみましょう。グループごとにアイデアを上げたら実際にコーディングしてみましょう。
    //       : コーディングの際はメソッドの中でふるまいを文章で書いてコンソール出力したり、何らかの変数とセッターゲッターを追加するだけでよいです。
    //       : そのメソッドをCat.javaでオーバーライド(再定義もしくはカスタマイズ)して Cat.java とそれを継承した子クラスをSlackへポストしてください。
    //       : グループディスカッション後に、サンプルにできそうなコードをメインルームでレビューしてみます。どんなお話が出たかお聞かせいただくことがあります。
    //       : Hint >> 例えば「トラは水に入りますが、イエネコは水には入らない」ですね。他にも「多くのネコは群れを作りませんが、ライオンは群れを作ります」。
    //
    // EX    : 取り組んでおられるEXがあれば、残りの時間で作業なさってください。
    // *****************************************
    
    
    
    
    // ■ すべてのクラスは暗黙の内に Object クラスを継承している!!
    //
    // Tiger クラスの中身は空っぽなのに... 
    Tiger tiger1 = new Tiger();
    Tiger tiger2 = new Tiger();
    
    // 次のようにできます。
    System.out.println("tiger1 = " + tiger1.toString());
    if(tiger1.equals(tiger2)) {
      System.out.println("tiger1 と tiger2 は同じです。");
    }else{
      System.out.println("tiger1 と tiger2 は違います。");
    }
    System.out.println();
    
    // 実はすべてのクラスは暗黙の内に Object クラスを継承しているのでこのようにできます。
    Object obj1 = new Object();
    Object obj2 = new Object();
    System.out.println("obj1 = " + obj1);
    if(obj1.equals(obj2)) {
      System.out.println("obj1 と obj2 は同じです。");
    }else{
      System.out.println("obj1 と obj2 は違います。");
    }
    System.out.println();
    
    // 意識しませんでしたが...
    // toString(), equals() は Object クラスのメソッドを使用したり、オーバーライドしていたことになります。
    
    
    
   
    // ■ ポリモーフィズム
    // 例によってまた英語が出てきましたので、言葉のイメージをつかみましょう。
    //
    // ポリモーフィズムは「ポリ」と「モーフィズム」がくっついてできた言葉です。
    //   ポリ ... 多くの(poly)
    //   モーフィズム ...  変形(morph)、理念(ism)
    //
    // 別の言葉では「多態性」といいます。意味がつかみにくい方はざっくりとこんな意味合いで考えるのはいかがでしょう。
    //
    //   「あるものを様々なバリエーションに変形させて、だけどまとめて扱いたい」
    //　
    // ref1 : https://ejje.weblio.jp/content/poly
    //　ref2 : https://tech.arms-soft.co.jp/entry/2022/12/28/090000
    // ref3 : https://webpia.jp/polymorphism/#index_id0
     
    // eg: ネコ のバリエーション
    // 
    // ネコ
    //  +-- ヒョウ
    //       +-- ライオン
    //       +-- トラ
    //       +-- etc...
    //  +-- イエネコ
    //       +-- リビアヤマネコ
    //       +-- スナネコ
    //       +-- etc... 
    
    // eg: ボトムスのバリエーション
    // 
    // ボトムス
    //  +-- スカート
    //        +--- タイト
    //        +--- フレア
    //        +--- プリーツ
    //        +--- etc...
    //  +-- パンツ
    //        +--- キュロット
    //        +--- スラックス
    //        +--- カーゴ
    //        +--- etc...
    
    // eg: ガンダムのバリエーション
    //
    // モビルスーツ
    //  +--- ガンダム
    //        +--- ジム
    //        +--- ガンダムMk-II
    //        +--- etc...
    //      
    //  +--- ザク
    //        +--- ザクキャノン
    //        +--- グフ
    //  +--- etc...
    
    
    // Java では「ポリモーフィズム」を「クラスと継承、オーバーライド」で実現しています。
    // 
    
    // ● クラスの変換
    // ポリモーフィズムを取り入れると、以下のように書くことができます!!

    //
    // この書き方をクラスの「アップキャスト」といいます (int <-> double などで変換するときは「キャスト」をするのでした)。
    Cat catLion = new Lion("シンバ");
    catLion.getSex(); // Cat型の変数に入れているのでCat型で定義されているメソッドは呼び出せる!
    //
    // ★★★★ ポリモーフィズムの中で、この書き方がめちゃくちゃ重要です!! ★★★★
    System.out.println("Cat 型の変数に Lion クラスを代入し speak() を呼び出すと... ");
    catLion.speak();  // Cat型の変数に入っているが、オーバーライドされているメソッドを呼び出すと...?
    System.out.println("ライオン　の吠え声になっている !!");
    //
    //catLion.setTategami(); // Cat型の変数に入れているので、Lionクラスで定義されているメソッドは呼び出せない!! 
    //catLion.getTategami(); // Cat型の変数に入れているので、Lionクラスで定義されているメソッドは呼び出せない!!
    
    
    //
    // この書き方をクラスの「ダウンキャスト」といいます。
    Object objLion = new Lion("ムファサ"); // すべてのクラスは Object を継承しているのでこのように書けます。これは先ほど出てきた「アップキャスト」です。
    //
    // Object にはどんなクラスでも入れられるので、本当にLionクラスのインスタンスが入っているのか調べるために instanceof で確認しています。
    if(objLion instanceof Lion) {
      Lion lionDC = (Lion)objLion; // この書き方をクラスの「ダウンキャスト」と呼びます。
      lionDC.isExistTategami(); // ダウンキャストしてLion型の変数に入れたので、isExistTategami()を呼び出すことができます。
    }
    
    
    
    // *****************************************
    // ★演習
    // Mini : Cat 型で宣言した変数に Lio　や自作の動物クラスを代入します。
    //      : その後　Cat　クラスで定義されている各種メソッドを呼び出し、オーバーライドによって動作が変わっていることを確認してみましょう。
    // Full : グループで「タクシー、電車、バス、飛行機...など」のグループを抽象化し、継承関係を持つ親クラスクラスとして定義できるよう考えてみましょう。
    //      : グループでディスカッションしSlackへクラス名と役割をポストしてください。
    //      :
    //      : クラスを作成できたら「クラスの変換機能」を使って、親クラス型の変数からオーバーライドメソッドを呼び出せることを確認してください。
    //      : グループディスカッション後に、わかりやすいサンプルになりそうなコードをメインルームでレビューしてみます。
    //      : Hint >> GoogleやYahooの移動経路アプリなどでは色々な交通手段で移動した場合の出発・目的地、経路や料金を表示できます。
    //      :         このような機能をJavaの継承を使って開発する場合は、どんなクラスがあるとよいでしょうか。その点をイメージすると良いかもしれません。
    //      :         もちろん完全に同じものは作れないので、簡単な機能だけを反映させてみてください。
    //      : ファイルはtranportというパッケージを作り、その中においてください。
    //      :
    //EX    : 取り組んでおられるEXがあれば、残りの時間で作業なさってください。
    // *****************************************
    
  }
}
